---
# Source: kai/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: anchore-kai
  labels:
    app.kubernetes.io/name: kai
    app.kubernetes.io/instance: kai
    app.kubernetes.io/version: "0.3.2"
---
# Source: kai/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kai
  labels:
    app: kai
    chart: kai-0.3.2
    release: kai
    heritage: Helm
type: Opaque
stringData:
  KAI_ANCHORE_PASSWORD: foobar
---
# Source: kai/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: kai
  labels:
    app: kai
    chart: kai-0.3.2
    release: kai
    heritage: Helm
data:
  config.yaml: |
    kubeconfig:
      path: use-in-cluster
      cluster: docker-desktop
    output: json
    quiet: false
    log:
      structured: false
      level: debug
      file:
    namespaces:
      null
    namespace-selectors:
      exclude: []
      include: []
    mode: periodic
    polling-interval-seconds: 60
    kubernetes-request-timeout-seconds:
    kubernetes:
      request-timeout-seconds: 60
      request-batch-size: 100
      worker-pool-size: 100
    ignore-not-running: true
    missing-tag-policy:
      policy: digest
      tag: UNKNOWN
    anchore:
      url:
      user: admin
      password: $KAI_ANCHORE_PASSWORD
      account: admin
      http:
        insecure: true
        timeout-seconds: 10
---
# Source: kai/templates/cluster-role-readonly.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kai-read-only
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
---
# Source: kai/templates/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kai-read-only-binding
subjects:
  - kind: ServiceAccount
    name: anchore-kai
    namespace: default
roleRef:
  kind: ClusterRole
  name: kai-read-only
  apiGroup: rbac.authorization.k8s.io
---
# Source: kai/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kai
  labels:
    app.kubernetes.io/name: kai
    app.kubernetes.io/instance: kai
    app.kubernetes.io/version: "0.3.2"
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: kai
    app.kubernetes.io/instance: kai
---
# Source: kai/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kai
  labels:
    app.kubernetes.io/name: kai
    app.kubernetes.io/instance: kai
    app.kubernetes.io/version: "0.3.2"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kai
      app.kubernetes.io/instance: kai
  template:
    metadata:
      annotations:
        checksum/config: 5ce621f94681271f2f83604150d9cf8c61b59f0f9e62225388cae477f033645c
      labels:
        app.kubernetes.io/name: kai
        app.kubernetes.io/instance: kai
    spec:
      serviceAccountName: anchore-kai
      securityContext:
        {}
      containers:
        - name: kai
          securityContext:
            {}
          image: "xeol-agent:2"
          command: ["xeol-agent"]
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - kai
                - version
            initialDelaySeconds: 1
            timeoutSeconds: 10
            periodSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          readinessProbe:
            exec:
              command:
                - kai
                - version
            timeoutSeconds: 10
            periodSeconds: 15
            failureThreshold: 3
            successThreshold: 1
          resources:
            {}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/xdg/kai/config.yaml
              subPath: config.yaml
          envFrom:
            - secretRef:
                name: kai
      volumes:
        - name: config-volume
          configMap:
            name: kai
